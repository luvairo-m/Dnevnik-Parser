import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.upload import VkUpload
from Parser import Parser
from time import time
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO


session = vk_api.VkApi(token="4ddbc1b267c5801b297dd7e31988c4fcaad6a32741ca3786264b108ea70230a30300b49ff912523d8a71b")
upload = VkUpload(session)
parser = Parser(
    "https://login.dnevnik.ru/login/esia/kurgan",
    "https://schools.dnevnik.ru/children/marks.aspx?child=2176035&index=9&tab=period&homebasededucation=False"
)

def send_simple_message(user_id, message):
    session.method(
        "messages.send", {
            "user_id": user_id,
            "message": message,
            "random_id": 0
        }
    )

def send_rings(user_id):
    list = parser.return_timetable()

    message = ""        
    message += "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –°—É–±–±–æ—Ç–∞ (–±–µ–∑ –í—Ç–æ—Ä–Ω–∏–∫–∞):\n"
    for key, val in list[0].items():
        message += f"‚è± {key}: {val}\n"
    message += "\n–í—Ç–æ—Ä–Ω–∏–∫ (—Å –∫–ª–∞—Å—Å–Ω—ã–º —á–∞—Å–æ–º):\n"
    for key, val in list[1].items():
        message += f"‚è± {key}: {val}\n"

    send_simple_message(user_id, message)

def send_commands(user_id):
    commands = "1. –ö–æ–º–∞–Ω–¥—ã - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ \n2. –í—Å–µ –æ—Ü–µ–Ω–∫–∏ - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ \n3. –ù–∞—á–∞—Ç—å - –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É \
\n4. –û—Ü–µ–Ω–∫–∏ {–ø—Ä–µ–¥–º–µ—Ç} - –≤—ã–≤–æ–¥–∏—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É (—Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è) \
    \n5. –ó–≤–æ–Ω–∫–∏ - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–æ–≤ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)"
    send_simple_message(user_id, commands)

def info_marks(user_id):
    pass

def select_color(mark: float) -> tuple:
    if mark == "":
        pass
    else:
        if float(mark) >= 3.5:
            return ("#1ca020")
        elif float(mark) < 3.5 and float(mark) >= 2.5:
            return ("#f9a23b")
        else:
            return ("#f04708")

def select_mark(mark) -> str:
    if mark == "":
        return "–Ω–µ—Ç"
    else:
        if float(mark) >= 4.5:
            return "5"
        elif float(mark) >= 3.5 and float(mark) < 4.5:
            return "4"
        elif float(mark) >= 2.5 and float(mark) < 3.5:
            return "3"
        elif float(mark) >= 1.5 and float(mark) < 2.5:
            return "2"
        else:
            return "1"

def send_mark_billboard(user_id, subject):
    dict = parser.parse_marks(parser.getPageContent(parser.data_url))
    if subject.lower() in dict:        
        image = Image.open("E:\\Games\\luvairo\\board.jpg")
        drawable = ImageDraw.Draw(image)
        width = image.size[0]
        font = ImageFont.truetype("E:\\Games\\luvairo\\neversmile.otf", 350)
        font_mark = ImageFont.truetype("E:\\Games\\luvairo\\neversmile.otf", 275)

        drawable.text(
            (width / 2 - len(subject) * 79, 400), subject, 
            font=font
        )

        drawable.text(
            (550, 1000), "¬∑–°—Ä. –±–∞–ª–ª:", font=font_mark
        )
        drawable.text(
            (1570, 1000), dict[subject][1], font=font_mark,
            fill=select_color(dict[subject][1].replace(",", "."))
        )

        drawable.text(
            (550, 1400), "¬∑–û—Ü–µ–Ω–∫–∞:", font=font_mark
        )
        drawable.text(
            (1450, 1400), select_mark(dict[subject][1].replace(",", ".")), font=font_mark,
            fill=select_color(dict[subject][1].replace(",", "."))
        )

        drawable.line(
            (500, 820, width - 440, 820), fill='white',
            width=17
        )
        del drawable
        image.save("E:\\Games\\luvairo\\new_image.jpg")

        upload_image = upload.photo_messages(photos="E:\\Games\\luvairo\\new_image.jpg")[0]
        data = "photo{}_{}".format(upload_image['owner_id'], upload_image['id'])

        session.method(
            "messages.send", {
                "user_id": user_id,
                "message": "–í–∞—à –±–∏–ª–ª–±–æ—Ä–¥",
                "attachment": data,
                "random_id": 0
            }
        )
    else:
        send_simple_message(user_id, "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def send_marks(user_id, full, sub=None):
    if full:
        dict = parser.parse_marks(parser.getPageContent(parser.data_url))
        
        message = ""
        for key, val in dict.items():
            message += f"üñå {key.capitalize()}: {val[0]} {'=> ' + val[1] if val[1] != '' else ''}\n"

        send_simple_message(user_id, message)
    else:
        try:
            dict = parser.parse_marks(parser.getPageContent(parser.data_url))

            try:
                message = f"üñå {sub.capitalize()}: {dict[sub][0]} \nüìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {dict[sub][1] if dict[sub][1] != '' else 'z'}"
                send_simple_message(user_id, message)
            except KeyError as Error:
                send_simple_message(user_id, "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏ –ü–û–ú–û–©–¨ –û–¶–ï–ù–ö–ò, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ")

        except Exception as Error:
            send_simple_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞")

last_time = time()
for event in VkLongPoll(session).listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        user_id = event.user_id
        message = event.text.lower()

        if message == "–≤—Å–µ –æ—Ü–µ–Ω–∫–∏":
            if time() > last_time + 3:
                last_time = time()
                send_marks(user_id, True)
            else:
                send_simple_message(user_id, f"–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è {round(last_time + 3 - time(), 2)} —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ")

        elif message.split()[0] == "–ø–æ–º–æ—â—å" and message.split()[1] == "–æ—Ü–µ–Ω–∫–∏":
            send_simple_message(
                user_id,
                "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: –æ—Ü–µ–Ω–∫–∏ [–ø—Ä–µ–¥–º–µ—Ç] (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, —Å–∫–æ–±–∫–∏ –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ) \
                    \n–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, —Ç–æ –∏—Ö –Ω—É–∂–Ω–æ –∑–∞–∫–ª—é—á–∏—Ç—å –≤ –∫–∞–≤—ã—á–∫–∏ \
                    \n–ü—Ä–∏–º–µ—Ä: –æ—Ü–µ–Ω–∫–∏ \"–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\""
            )
        
        elif message.split()[0] == "–±–∞–ª–ª":
            send_mark_billboard(user_id, message.split()[1]) 

        elif message == "–∑–≤–æ–Ω–∫–∏":
            send_rings(user_id)
        
        elif message == "–∫–æ–º–∞–Ω–¥—ã":
            send_commands(user_id)

        elif message.split()[0] == "–æ—Ü–µ–Ω–∫–∏":
            if time() > last_time + 3:
                last_time = time()
                if message.split("&quot;")[0] == message:
                    send_marks(user_id, False, message.split(" ")[1])
                else:
                    send_marks(user_id, False, message.split("&quot;")[1])
            else:
                send_simple_message(user_id, f"–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è {round(last_time + 3 - time(), 2)} —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ")

        elif message == "–Ω–∞—á–∞—Ç—å":
            user_data = session.method("users.get", {"user_id": user_id})
            keyboard = VkKeyboard(one_time=False)
            keyboard.add_button("–í—Å–µ –æ—Ü–µ–Ω–∫–∏", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_openlink_button("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)", link="https://play.google.com/store/apps/details?id=ru.luvairo.markplus")
            keyboard.add_line()
            keyboard.add_button("–ö–æ–º–∞–Ω–¥—ã", color=VkKeyboardColor.PRIMARY)
            session.method(
                "messages.send", {
                    "user_id": user_id,
                    "message": f"–ü—Ä–∏–≤–µ—Ç, {user_data[0]['first_name']} {user_data[0]['last_name']}! –Ø –¥–æ–±–∞–≤–∏–ª –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞",
                    "keyboard": keyboard.get_keyboard(),
                    "random_id": 0
                }
            )

        else:
            send_simple_message(
                user_id, 
                "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –ù–ê–ß–ê–¢–¨ –∏–ª–∏ –ö–û–ú–ê–ù–î–´, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
            )
